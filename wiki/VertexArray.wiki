#summary JOGL Vertex Array

= Introduction =

This is an incomplete example and it does not compile. Use it ony to get an idea about how vertex array works on JOGL.


= Details =

  * Firstly, you have to declare some buffers and arrays for normals, vertices, and indices (and even colors):
{{{
FloatBuffer normals;
FloatBuffer vertices;
IntBuffer indices;
	
float vNormals[] = { 0,0,1 , 0,0,1 , 0,0,1 , 0,0,1 , 0,0,1 , 0,0,1 , 0,0,1 , 0,0,1 , 0,0,1 , 0,0,1};// , 
			//0,0,-1 , 0,0,-1 , 0,0,-1 , 0,0,-1 , 0,0,-1 , 0,0,-1 , 0,0,-1 , 0,0,-1 , 0,0,-1 , 0,0,-1};
float vVertices[] = { 0.0f,0.4f,0.5f , 0.0f,1.6f,0.5f , 0.33f,2.0f,0.5f , 0.33f,1.6f,0.5f , 0.66f,2.0f,0.5f , 0.66f,1.6f,0.5f , 1.0f,2.0f,0.5f , 1.0f,0.0f,0.5f , -1.0f,0.0f,0.5f , -1.0f,0.4f,0.5f ,
			0.0f,0.4f,-0.5f , 0.0f,1.6f,-0.5f , 0.33f,2.0f,-0.5f , 0.33f,1.6f,-0.5f , 0.66f,2.0f,-0.5f , 0.66f,1.6f,-0.5f , 1.0f,2.0f,-0.5f , 1.0f,0.0f,-0.5f , -1.0f,0.0f,-0.5f , -1.0f,0.4f,-0.5f};
int vIndices[] = { 0,1,2,3,9 };// , 
			//10,11,12,13,14,15,16,17,18,19};
}}}

  * Secondy, you have to fill the buffers with the data used to initialize the arrays. Do not forget to rewind the buffer:
{{{
this.normals = BufferUtil.newFloatBuffer(vNormals.length);
for (int i = 0; i < vNormals.length; i++) {
	this.normals.put(vNormals[i]);
}
this.normals.rewind();

this.vertices = BufferUtil.newFloatBuffer(vVertices.length);
for (int i = 0; i < vVertices.length; i++) {
	this.vertices.put(vVertices[i]);
}
this.vertices.rewind();
		
this.indices = BufferUtil.newIntBuffer(vIndices.length);
for (int i = 0; i < vIndices.length; i++) {
	this.indices.put(vIndices[i]);
}
this.indices.rewind();
}}}

  * Finally, in the draw function, you have to enable some client state variables and specify some pointers. Now you can use glDrawElements and glDrawRangeElements functions to draw your polygons. Do not forget to disable the client state variables.
{{{
// Enable and specificy pointers to vertex arrays
GLSingleton.getGL().glEnableClientState(GL.GL_NORMAL_ARRAY);
GLSingleton.getGL().glEnableClientState(GL.GL_VERTEX_ARRAY);

GLSingleton.getGL().glPushMatrix();
	GLSingleton.getGL().glColor4fv(this.color.getColorFB());
	GLSingleton.getGL().glTranslatef(this.positionX, 1.0f, this.positionY);
	GLSingleton.getGL().glDrawElements(GL.GL_POLYGON, 5, GL.GL_UNSIGNED_INT, indices);
	//GLSingleton.getGL().glDrawRangeElements(GL.GL_POLYGON, 10, 19, 10, GL.GL_UNSIGNED_INT, indices);
GLSingleton.getGL().glPopMatrix();

GLSingleton.getGL().glDisableClientState(GL.GL_VERTEX_ARRAY);
GLSingleton.getGL().glDisableClientState(GL.GL_NORMAL_ARRAY);
}}}